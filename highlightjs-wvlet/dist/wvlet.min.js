/*! Wvlet syntax highlighting for highlight.js */
!function(e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=function(e){const n={keyword:"model def type extends native inline val from select where group by having order limit agg join left right full inner cross asof on pivot unpivot partition over rows range add prepend exclude rename shift drop describe concat dedup intersect except all distinct save append delete truncate import export package execute use run test should be contain debug show explain sample count if then else case when end and or not is like between exists in as with to for let this",literal:"true false null",built_in:"asc desc nulls first last of map"},a={className:"subst",begin:/\$\{/,end:/\}/,keywords:n,contains:[]},s={className:"string",begin:/"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a]},i={className:"string",variants:[{begin:/"/,end:/"/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,a]},{begin:/'/,end:/'/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE]}]},t=e.COMMENT(/--/,/$/,{relevance:0}),l=e.COMMENT(/---/,/---/,{relevance:10,contains:[{className:"doctag",begin:/@\w+/}]}),c={className:"number",variants:[{begin:/\b\d+L\b/},{begin:/\b\d+\.\d+[fF]\b/},{begin:/\b\d+[fF]\b/},{begin:/\b\d+\.\d+([eE][+-]?\d+)?\b/},{begin:/\b\d+[eE][+-]?\d+\b/},{begin:/\b\d+\b/}],relevance:0},o={className:"function",beginKeywords:"model def type",end:/[={]/,excludeEnd:!0,contains:[{className:"title",begin:/[a-zA-Z_][a-zA-Z0-9_]*/,relevance:0},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,contains:[i,c,e.C_LINE_COMMENT_MODE]}]},d={className:"variable",begin:/\b[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*/,relevance:0},r={className:"operator",begin:/!=|<>|<=|>=|::|->|<-|=>|\|\||&&|==|[=<>+\-*/%!]/,relevance:0},b={className:"meta",begin:/^test\b/,end:/$/,keywords:"test should be contain",contains:[i,c,t,d]};return a.contains=[i,c,d,r],{name:"Wvlet",aliases:["wv"],case_insensitive:!1,keywords:n,contains:[l,t,s,i,c,r,o,b,{begin:/\bfrom\s+'/,beginScope:{1:"keyword"},end:/'/,contains:[{className:"string",begin:/[^']+/}]},{className:"built_in",begin:/\b[a-zA-Z_][a-zA-Z0-9_]*(?=\s*\()/,relevance:0},{className:"symbol",begin:/`/,end:/`/,contains:[{begin:/\\./}]},{className:"variable",begin:/\b_\b/,relevance:0},e.C_BLOCK_COMMENT_MODE]}}:"function"==typeof define&&define.amd?define(function(){return function(e){const n={keyword:"model def type extends native inline val from select where group by having order limit agg join left right full inner cross asof on pivot unpivot partition over rows range add prepend exclude rename shift drop describe concat dedup intersect except all distinct save append delete truncate import export package execute use run test should be contain debug show explain sample count if then else case when end and or not is like between exists in as with to for let this",literal:"true false null",built_in:"asc desc nulls first last of map"},a={className:"subst",begin:/\$\{/,end:/\}/,keywords:n,contains:[]},s={className:"string",begin:/"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a]},i={className:"string",variants:[{begin:/"/,end:/"/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,a]},{begin:/'/,end:/'/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE]}]},t=e.COMMENT(/--/,/$/,{relevance:0}),l=e.COMMENT(/---/,/---/,{relevance:10,contains:[{className:"doctag",begin:/@\w+/}]}),c={className:"number",variants:[{begin:/\b\d+L\b/},{begin:/\b\d+\.\d+[fF]\b/},{begin:/\b\d+[fF]\b/},{begin:/\b\d+\.\d+([eE][+-]?\d+)?\b/},{begin:/\b\d+[eE][+-]?\d+\b/},{begin:/\b\d+\b/}],relevance:0},o={className:"function",beginKeywords:"model def type",end:/[={]/,excludeEnd:!0,contains:[{className:"title",begin:/[a-zA-Z_][a-zA-Z0-9_]*/,relevance:0},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,contains:[i,c,e.C_LINE_COMMENT_MODE]}]},d={className:"variable",begin:/\b[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*/,relevance:0},r={className:"operator",begin:/!=|<>|<=|>=|::|->|<-|=>|\|\||&&|==|[=<>+\-*/%!]/,relevance:0},b={className:"meta",begin:/^test\b/,end:/$/,keywords:"test should be contain",contains:[i,c,t,d]};return a.contains=[i,c,d,r],{name:"Wvlet",aliases:["wv"],case_insensitive:!1,keywords:n,contains:[l,t,s,i,c,r,o,b,{begin:/\bfrom\s+'/,beginScope:{1:"keyword"},end:/'/,contains:[{className:"string",begin:/[^']+/}]},{className:"built_in",begin:/\b[a-zA-Z_][a-zA-Z0-9_]*(?=\s*\()/,relevance:0},{className:"symbol",begin:/`/,end:/`/,contains:[{begin:/\\./}]},{className:"variable",begin:/\b_\b/,relevance:0},e.C_BLOCK_COMMENT_MODE]}}}):e.hljsDefineWvlet=function(e){const n={keyword:"model def type extends native inline val from select where group by having order limit agg join left right full inner cross asof on pivot unpivot partition over rows range add prepend exclude rename shift drop describe concat dedup intersect except all distinct save append delete truncate import export package execute use run test should be contain debug show explain sample count if then else case when end and or not is like between exists in as with to for let this",literal:"true false null",built_in:"asc desc nulls first last of map"},a={className:"subst",begin:/\$\{/,end:/\}/,keywords:n,contains:[]},s={className:"string",begin:/"""/,end:/"""/,contains:[e.BACKSLASH_ESCAPE,a]},i={className:"string",variants:[{begin:/"/,end:/"/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE,a]},{begin:/'/,end:/'/,illegal:/\n/,contains:[e.BACKSLASH_ESCAPE]}]},t=e.COMMENT(/--/,/$/,{relevance:0}),l=e.COMMENT(/---/,/---/,{relevance:10,contains:[{className:"doctag",begin:/@\w+/}]}),c={className:"number",variants:[{begin:/\b\d+L\b/},{begin:/\b\d+\.\d+[fF]\b/},{begin:/\b\d+[fF]\b/},{begin:/\b\d+\.\d+([eE][+-]?\d+)?\b/},{begin:/\b\d+[eE][+-]?\d+\b/},{begin:/\b\d+\b/}],relevance:0},o={className:"function",beginKeywords:"model def type",end:/[={]/,excludeEnd:!0,contains:[{className:"title",begin:/[a-zA-Z_][a-zA-Z0-9_]*/,relevance:0},{className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:n,contains:[i,c,e.C_LINE_COMMENT_MODE]}]},d={className:"variable",begin:/\b[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*/,relevance:0},r={className:"operator",begin:/!=|<>|<=|>=|::|->|<-|=>|\|\||&&|==|[=<>+\-*/%!]/,relevance:0},b={className:"meta",begin:/^test\b/,end:/$/,keywords:"test should be contain",contains:[i,c,t,d]};return a.contains=[i,c,d,r],{name:"Wvlet",aliases:["wv"],case_insensitive:!1,keywords:n,contains:[l,t,s,i,c,r,o,b,{begin:/\bfrom\s+'/,beginScope:{1:"keyword"},end:/'/,contains:[{className:"string",begin:/[^']+/}]},{className:"built_in",begin:/\b[a-zA-Z_][a-zA-Z0-9_]*(?=\s*\()/,relevance:0},{className:"symbol",begin:/`/,end:/`/,contains:[{begin:/\\./}]},{className:"variable",begin:/\b_\b/,relevance:0},e.C_BLOCK_COMMENT_MODE]}}}("undefined"!=typeof self?self:this);