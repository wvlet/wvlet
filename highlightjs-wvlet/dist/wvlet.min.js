/*! Wvlet syntax highlighting for highlight.js */
(function(global,factory){if(typeof exports === 'object' && typeof module !== 'undefined'){module.exports = factory();}else if(typeof define === 'function' && define.amd){define(factory);}else{global.hljsDefineWvlet = factory();}}(typeof self !== 'undefined' ? self:this,function(){return function(hljs){const KEYWORDS ={keyword:'model def type extends native inline val ' + 'from select where group by having order limit agg ' + 'join left right full inner cross asof on ' + 'pivot unpivot partition over rows range ' + 'add prepend exclude rename shift drop describe ' + 'concat dedup intersect except all distinct ' + 'save append delete truncate ' + 'import export package execute use run ' + 'test should be contain debug ' + 'show explain sample count ' + 'if then else case when end ' + 'and or not is like between exists in as with to for let this',literal:'true false null',built_in:'asc desc nulls first last of map'};const WVLET_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;const BACKQUOTED_IDENT ={className:'symbol',begin:/`/,end:/`/,contains:[{begin:/\\./}]};const STRING_INTERPOLATION ={className:'subst',begin:/\$\{/,end:/\}/,keywords:KEYWORDS,contains:[]};const TRIPLE_QUOTE_STRING ={className:'string',begin:/"""/,end:/"""/,contains:[ hljs.BACKSLASH_ESCAPE,STRING_INTERPOLATION ]};const STRING ={className:'string',variants:[{begin:/"/,end:/"/,illegal:/\n/,contains:[ hljs.BACKSLASH_ESCAPE,STRING_INTERPOLATION ]},{begin:/'/,end:/'/,illegal:/\n/,contains:[hljs.BACKSLASH_ESCAPE]}]};const COMMENT = hljs.COMMENT(/--/,/$/,{relevance:0});const DOC_COMMENT = hljs.COMMENT(/---/,/---/,{relevance:10,contains:[{className:'doctag',begin:/@\w+/}]});const NUMBER ={className:'number',variants:[{begin:/\b\d+L\b/},{begin:/\b\d+\.\d+[fF]\b/},{begin:/\b\d+[fF]\b/},{begin:/\b\d+\.\d+([eE][+-]?\d+)?\b/},{begin:/\b\d+[eE][+-]?\d+\b/},{begin:/\b\d+\b/}],relevance:0};const MODEL_DEF ={className:'function',beginKeywords:'model def type',end:/[={]/,excludeEnd:true,contains:[{className:'title',begin:WVLET_IDENT,relevance:0},{className:'params',begin:/\(/,end:/\)/,excludeBegin:true,excludeEnd:true,keywords:KEYWORDS,contains:[ STRING,NUMBER,hljs.C_LINE_COMMENT_MODE ]}]};const COLUMN_REF ={className:'variable',begin:/\b[a-zA-Z_][a-zA-Z0-9_]*(\.[a-zA-Z_][a-zA-Z0-9_]*)*/,relevance:0};const OPERATORS ={className:'operator',begin:/!=|<>|<=|>=|::|->|<-|=>|\|\||&&|==|[=<>+\-*/%!]/,relevance:0};const UNDERSCORE ={className:'variable',begin:/\b_\b/,relevance:0};const TEST_ASSERTION ={className:'meta',begin:/^test\b/,end:/$/,keywords:'test should be contain',contains:[ STRING,NUMBER,COMMENT,COLUMN_REF ]};const FROM_STATEMENT ={begin:/\bfrom\s+'/,beginScope:{1:'keyword'},end:/'/,contains:[{className:'string',begin:/[^']+/}]};const FUNCTION_CALL ={className:'built_in',begin:/\b[a-zA-Z_][a-zA-Z0-9_]*(?=\s*\()/,relevance:0};STRING_INTERPOLATION.contains = [ STRING,NUMBER,COLUMN_REF,OPERATORS ];return{name:'Wvlet',aliases:['wv'],case_insensitive:false,keywords:KEYWORDS,contains:[ DOC_COMMENT,COMMENT,TRIPLE_QUOTE_STRING,STRING,NUMBER,OPERATORS,MODEL_DEF,TEST_ASSERTION,FROM_STATEMENT,FUNCTION_CALL,BACKQUOTED_IDENT,UNDERSCORE,hljs.C_BLOCK_COMMENT_MODE ]};}}));