-- Test table value constants
-- Comprehensive tests covering all TableValueConstantTest scenarios

-- Basic table value constant with column names
val t1(id, name) = [[1, "Alice"], [2, "Bob"]]

from t1
test _.columns should be ["id", "name"]
test _.size should be 2
test _.rows should be [
  [1, "Alice"],
  [2, "Bob"]
]

-- Table value constant with column types
val t2(id:int, name:string) = [[1, "Alice"], [2, "Bob"]]

from t2
test _.columns should be ["id", "name"]
test _.size should be 2
test _.rows should be [
  [1, "Alice"],
  [2, "Bob"]
]

-- Table value constant with trailing comma
val t3(id, name) = [
  [1, "Alice"],
  [2, "Bob"],
]

from t3
test _.columns should be ["id", "name"]
test _.size should be 2

-- Table value constant with trailing comma in rows
val t4(id, name) = [
  [1, "Alice",],
  [2, "Bob",],
]

from t4
test _.columns should be ["id", "name"]
test _.size should be 2

-- Empty table value constant
val empty_table(id, name) = []

from empty_table
test _.columns should be ["id", "name"]
test _.size should be 0

-- Table value constant with single row
val single_row(x, y, z) = [[1, 2, 3]]

from single_row
test _.columns should be ["x", "y", "z"]
test _.size should be 1
test _.rows should be [
  [1, 2, 3]
]

-- Regular val definition (non-table)
val x = 42

select x
test _.rows should be [[42]]

-- Extended tests with more complex scenarios
val t5(id, name, score) = [
  [1, "Alice", 95.5],
  [2, "Bob", 87.0],
  [3, "Charlie", 92.3]
]

from t5
test _.size should be 3

-- Reuse table value constant multiple times
val products(id, name, price) = [
  [1, "Laptop", 999.99],
  [2, "Mouse", 29.99],
  [3, "Keyboard", 79.99],
]

from products
where price > 50
test _.size should be 2

from products
where price < 50
test _.size should be 1

-- Join with table value constant (simplified for now)
val categories(id, category) = [
  [1, "Electronics"],
  [2, "Electronics"],
  [3, "Electronics"],
]

from categories
test _.size should be 3