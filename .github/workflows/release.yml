name: Release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  release:
    name: Create a new release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        # We need to fetch all tags to get the latest tag
        with:
         fetch-depth: 0
      - if: startsWith(github.ref, 'refs/tags/v')
        name: Create a release note
        run: |
          gh release view "$GITHUB_REF_NAME" --repo="$GITHUB_REPOSITORY" | \
          # Create a new release note only when the release note is not created yet
          gh release create "$GITHUB_REF_NAME" --repo="$GITHUB_REPOSITORY" --generate-notes
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'
          cache: sbt
      - name: Build wvlet-cli
        run: ./sbt cli/packArchiveTgz
      - name: Get the release version name
        run: |
          # Strip v from tag name
          VERSION=${GITHUB_REF_NAME#v}
          echo Version: $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload wvlet-cli-(version).tgz to GitHub release
        run: |
          gh release upload "$GITHUB_REF_NAME" "wvlet-cli/target/wvlet-cli-${VERSION}.tar.gz" \
          --clobber --repo="$GITHUB_REPOSITORY"
  homebrew:
      name: Update homebrew-wvlet
      needs: release
      runs-on: ubuntu-latest
      steps:
        - name: Generate token
          uses: actions/create-github-app-token@v1
          id: app-token
          with:
            app-id: ${{ vars.APP_ID }}
            private-key: ${{ secrets.APP_PRIVATE_KEY }}
        - uses: actions/checkout@v4
          with:
            repository: wvlet/homebrew-wvlet
        - name: Setup git
          run: |
            git config --global user.email "leo@xerial.org"
            git config --global user.name "Taro L. Saito"
            git config --global push.default simple
        - name: Update VERSION
          run: |
            echo "${GITHUB_REF_NAME#v}" > VERSION
            git add VERSION
            git diff-index --quiet --cached HEAD || git commit -am "New release for wvlet ${VERSION}"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
        - name: Create a PR to update version
          run: |
            gh pr create --repo wvlet/homebrew-wvlet \
            --title "Release wvlet ${{ env.VERSION }}"\
            --body "Release wvlet [${{ env.VERSION }}](https://github.com/wvlet/wvlet/releases/tag/${GITHUB_REF_NAME})"
          env:
            GH_TOKEN: ${{ steps.app-token.outputs.token }}


