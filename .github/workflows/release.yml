name: Release

on:
  push:
    tags:
      - v*
  workflow_dispatch:

jobs:
  release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create a new release
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        # We need to fetch all tags to get the latest tag
        with:
         fetch-depth: 0
      - name: Create a release note
        run: |
          gh release view "$GITHUB_REF_NAME" --repo="$GITHUB_REPOSITORY" | \
          # Create a new release note only when the release note is not created yet
          gh release create "$GITHUB_REF_NAME" --repo="$GITHUB_REPOSITORY" --generate-notes
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'
          cache: sbt
      - name: Build wvlet-cli
        run: ./sbt cli/packArchiveTgz
      - name: Get the release version name
        run: |
          # Strip v from tag name
          VERSION=${GITHUB_REF_NAME#v}
          echo Version: $VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Upload wvlet-cli-(version).tgz to GitHub release
        run: |
          gh release upload "$GITHUB_REF_NAME" "wvlet-cli/target/wvlet-cli-${VERSION}.tar.gz" \
          --clobber --repo="$GITHUB_REPOSITORY"
  homebrew:
    if: ${{ always() }}
    name: Update homebrew-wvlet
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Generate token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          # Need to acquire a token for other repository
          owner: ${{ github.repository_owner }}
          repositories: |
            homebrew-wvlet
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - uses: actions/checkout@v4
        with:
          # Need to specify the repository to set the write scope for git push
          repository: wvlet/homebrew-wvlet
          token: '${{ steps.app-token.outputs.token }}'
      - name: Setup git
        run: |
          git config --global user.name '${{ steps.app-token.outputs.app-slug }}[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+${{ steps.app-token.outputs.app-slug }}[bot]@users.noreply.github.com>'
          git config --global push.default simple
      - name: Update VERSION
        run: |
          git switch -c releases/${{ github.ref_name }}
          VERSION=${GITHUB_REF_NAME#v}
          echo Version: $VERSION
          echo $VERSION > VERSION
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Push a release branch
        run: |
          git add VERSION
          git diff-index --quiet --cached HEAD || git commit -am "New release for wvlet ${VERSION}"
          git push --set-upstream origin releases/${{ github.ref_name }}
      - name: Create a PR to update version
        run: |
          gh pr create --repo="wvlet/homebrew-wvlet" \
          --title "Release wvlet $VERSION" \
          --body "Release wvlet [$VERSION](https://github.com/wvlet/wvlet/releases/tag/${{ github.ref_name }})"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}


