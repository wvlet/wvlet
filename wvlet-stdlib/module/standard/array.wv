package wvlet.standard

-- An array created by 'group by' clause
type array[A]:
  def length: int = sql"length(${this})"
  def size: int = sql"length(${this})"
  def get(index: int): A = sql"${this}[${index}]"
  def count: int = sql"count(*)"
  def count_distinct: int = sql"count(distinct ${this})"
  def count_if(cond:boolean): int = sql"count_if(${cond})"

  -- Fast and memory-efficient approximate counting of distinct elements
  def count_approx_distinct in trino: int = sql"approx_distinct(${this})"
  def count_approx_distinct in duckdb: int = sql"approx_count_distinct(${this})"

  def arbitrary: A = sql"arbitrary(${this})"
  def any: A = sql"arbitrary(${this})"

  def min: A = sql"min(${this})"
  def max: A = sql"max(${this})"

  def min_by(expr: sql): A = sql"min_by(${this}, ${expr})"
  def max_by(expr: sql): A = sql"max_by(${this}, ${expr})"

  def exists: boolean = sql"exists(${this})"
  def not_exists: boolean = sql"not exists(${this})"
end

-- array functions specific to numeric elements
type array[A of numeric]:
  def sum: A = sql"sum(${this})"
  def avg: A = sql"avg(${this})"
  def median: A = sql"median(${this})"
  def variance: A = sql"variance(${this})"
  def stddev: A = sql"stddev(${this})"

  def approx_quantile(pos:double) in trino: A = sql"aprox_percentile(${this}, ${pos})"
  def approx_quantile(pos:double) in duckdb: A = sql"approx_quantile(${this}, ${pos})"
end
